FILE ORGANIZATION
-----------------

The directory structure is organized like this:

build/       support files for building the application
lib/         Zoe library
src/         Zoe executable
tests/       Unit tests


The files are:

/
  COPYING        The GPLv3 license
  HACKING        This file
  INSTALL        Installation instructions
  Makefile       Build instructions for make
  README.md      Markdown README file (for github)
  zoe.1          Manual page
build/
  config.mk      User-configurable options for make
  version.mk     Contains the version number
  WARNINGS       A list of warnings issued by gcc when building
  zoe.supp       Suppression file for valgrind
lib/
  zvalue.h       Union containing all types acceptable by Zoe
  stack.cc       Stack management for ZoeVM
  zoe.cc         ZoeVM (only the bare bones)
  zoeext.cc      ZoeVM extension functions
  bytecode.cc    Bytecode management (the parser is called from here)
  lexer.l        The lexer
  parser.y       The parser
tests/
  tests.c        Unit tests


MEMORY MANAGEMENT
-----------------

All functions that return a string need to be freed by the caller afterwards.

Stack memory management is tricky. Some types (such as string) will have their
memory pointer moved around. The final responsability for freeing this pointer
belongs to whoever consumes it. So, if the string is simply removed from the 
stack, the freer is the remove function. If, however, the user pops the value
from the stack, it is his responsability to free it.
